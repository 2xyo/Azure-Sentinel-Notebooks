{
    "Sentinel - Get Configuration parameters": {
      "prefix": ["get-sentinelconfiguration", "get-sentinelconfig"],
      "body": [
        "####################################################",
        "# Sentinel - Get Sentinel Configuration parameters #",
        "####################################################",
        "import json",
        "def read_config_values(file_path):",
        "    'This loads pre-generated parameters for Azure Sentinel Workspace'",
        "    with open(file_path) as json_file:",
        "        if json_file:",
        "            json_config = json.load(json_file)",
        "            return (json_config['${1:tenant_id}'],",
        "                json_config['${2:subscription_id}'],",
        "                json_config['${3:resource_group}'],",
        "                json_config['${4:workspace_id}'],",
        "                json_config['${5:workspace_name}'],",
        "                json_config['${6:user_alias}'],",
        "                json_config['${7:user_object_id}'])",
        "    return None",
        "",
        "# Calling the above function to populate Sentinel workspace parameters",
        "# The file, config.json, was generated by the system, however, you may modify the values, or manually set the variables",
        "tenant_id, subscription_id, resource_group, workspace_id, workspace_name, user_alias, user_object_id = read_config_values('config.json')"
      ],
      "description": "Get Azure Sentinel configuration parameters from config.json"
    },

    "Sentinel - Set up environment for MSTICPy": {
      "prefix": ["msticpy-setup"],
      "body": [
        "#####################################################",
        "# Sentinel - Set up environment for MSTICPy         #",
        "#####################################################",
        "# import some modules needed in this cell",
        "from pathlib import Path",
        "from IPython.display import display, HTML",
        "",
        "update_nbcheck = (",
        "    '<p style='color: orange; text-align=left'>'",
        "    '<b>Warning: we needed to update '<i>utils/nb_check.py</i>'</b><br>'",
        "    'Please restart the kernel and re-run this cell.'",
        "    '</p>')",
        "",
        "REQ_PYTHON_VER= '3.6'",
        "REQ_MSTICPY_VER='1.2.3'",
        "",
        "display(HTML('Checking upgrade to latest msticpy version'))",
        "%pip install --upgrade --quiet msticpy[azuresentinel]",
        "",
        "display(HTML('<h3>Starting Notebook setup...</h3>'))",
        "# If you did not clone the entire Azure-Sentinel-Notebooks repo you may not have this file",
        "if Path('./utils/nb_check.py').is_file():",
        "    try:",
        "        from utils.nb_check import check_versions",
        "    except ImportError as err:",
        "       !curl https://raw.githubusercontent.com/Azure/Azure-Sentinel-Notebooks/master/utils/nb_check.py > ./utils/nb_check.py 2>/dev/null",
        "       display(HTML(update_nbcheck))",
        "    if 'check_versions' not in globals():",
        "        raise ImportError('Old version of nb_check.py detected - see instructions below')",
        "    check_versions(REQ_PYTHON_VER, REQ_MSTICPY_VER)",
        "",
        "# intialize msticpy",
        "from msticpy.nbtools import nbinit",
        "nbinit.init_notebook(",
        "    namespace=globals(),",
        "    extra_imports=[]",
        ")"
      ],
      "description": "Set up the execution environment for MSTICPy"
    },
  
    "Sentinel - Connect with MSTICPy": {
      "prefix": ["msticpy-connect"],
      "body": [
        "######################################",
        "# Sentinel -Connect with MSTICPy     #",
        "######################################",
        "",
        "from msticpy.data.data_providers import QueryProvider",
        "from msticpy.common.wsconfig import WorkspaceConfig",
        "",
        "ws_config = WorkspaceConfig()",
        "if not ws_config.config_loaded:",
            "ws_config.prompt_for_ws()",
        "", 
        "qry_prov = QueryProvider(data_environment='AzureSentinel')",
        "qry_prov.connect(ws_config)",
        "",
      ],
      "description": "Load an Azure Sentinel query provider and connect to the default workspace with MSTICPy"
    },
    
    "Sentinel - Authenticate into Azure resources": {
      "prefix": ["azure-login"],
      "body": [
        "####################################################",
        "# Sentinel - Authenticate into Azure resources     #",
        "####################################################",
        "# Azure CLI is used to get device code to login into Azure, you need to copy the code and open the DeviceLogin site.",
        "!az login --use-device-code"
      ],
      "description": "Using AZCLI to login to Azure resources"
    },
  
    "Sentinel - Authenticate into Azure Log Analytics": {
      "prefix": ["login-loganalytics"],
      "body": [
        "####################################################",
        "# Sentinel - Authenticate into Azure Log Analytics #",
        "####################################################",
        "# Azure CLI is used to get device code to login into Azure, you need to copy the code and open the DeviceLogin site.",
        "# !!! You need [tenant_id] and [subscription_id] to login into Azure !!!",
        "from azure.common.client_factory import get_client_from_cli_profile",
        "from azure.common.credentials import get_azure_cli_credentials",
        "from azure.loganalytics import LogAnalyticsDataClient",
        "from azure.mgmt.loganalytics import LogAnalyticsManagementClient",
        "from azure.loganalytics.models import QueryBody",
        "",
        "!az login --use-device-code",
        "la_client = get_client_from_cli_profile(LogAnalyticsManagementClient, subscription_id = subscription_id)",
        "creds, _ = get_azure_cli_credentials(resource='https://api.loganalytics.io')",
        "la_data_client = LogAnalyticsDataClient(creds)",
        " ",
        "# Query sample: ",
        "# query = 'union withsource = SentinelTableName * | distinct SentinelTableName | sort by SentinelTableName asc'",
        "# result = la_data_client.query(workspace_id, QueryBody(query=query))",
        "# print(result.as_dict())"
      ],
      "description": "Using AZCLI to login to Azure Log Analytics"
    }
  }
  